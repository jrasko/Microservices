// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Customer struct {
	ID string `json:"id"`
}

func (Customer) IsEntity() {}

type Order struct {
	ID       string           `json:"id"`
	Time     string           `json:"time"`
	State    OrderState       `json:"state"`
	Shop     *Shop            `json:"shop"`
	Customer *Customer        `json:"customer"`
	Products []*OrderProducts `json:"products"`
}

type OrderProducts struct {
	Order    *Order   `json:"order"`
	Product  *Product `json:"product"`
	Quantity int      `json:"quantity"`
	Price    float64  `json:"price"`
}

type Product struct {
	ID string `json:"id"`
}

func (Product) IsEntity() {}

type Shop struct {
	ID string `json:"id"`
}

func (Shop) IsEntity() {}

type OrderState string

const (
	OrderStateAccepted       OrderState = "ACCEPTED"
	OrderStateInProgress     OrderState = "IN_PROGRESS"
	OrderStateDone           OrderState = "DONE"
	OrderStateReadyForPickUp OrderState = "READY_FOR_PICK_UP"
	OrderStateRetrieved      OrderState = "RETRIEVED"
)

var AllOrderState = []OrderState{
	OrderStateAccepted,
	OrderStateInProgress,
	OrderStateDone,
	OrderStateReadyForPickUp,
	OrderStateRetrieved,
}

func (e OrderState) IsValid() bool {
	switch e {
	case OrderStateAccepted, OrderStateInProgress, OrderStateDone, OrderStateReadyForPickUp, OrderStateRetrieved:
		return true
	}
	return false
}

func (e OrderState) String() string {
	return string(e)
}

func (e *OrderState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderState", str)
	}
	return nil
}

func (e OrderState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
